#! /bin/sh
### BEGIN INIT INFO
# Provides:	     celeryd-service
# Required-Start:    $remote_fs $syslog apache2 mysql rabbitmq-server
# Required-Stop:     $remote_fs $syslog apache2 mysql rabbitmq-server
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Description:       celery service
# Short-Description: Enable celery service 
### END INIT INFO

# Author: Foo Bar <foobar@baz.org>

# Do NOT "set -e"

PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin
NAME=celeryd-service
MSERVE_HOME=/opt/mserve
MSERVE_LOG=/var/log/mserve
MSERVE_DATA=/var/opt/mserve-data
DAEMON=$MSERVE_HOME/manage.py
DESC="mserve service"
USER=www-data
INIT_LOG_DIR=/var/log/mserve
SCRIPTNAME=/etc/init.d/$NAME
hn=$HOSTNAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh
. /lib/lsb/init-functions

do_start() {
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	cd /tmp
        log_daemon_msg "Starting celery monitor"
        su www-data -c "$DAEMON celerycam --detach -f ${MSERVE_LOG}/celerycam.log --pidfile=${MSERVE_DATA}/celerycam.pid"
	log_daemon_msg "Starting celery server"
	su www-data -c "$DAEMON celeryd_multi restart --logfile=${MSERVE_LOG}/celeryd%n.log \
                    -l DEBUG 2 -n:1 normal.$hn -n:2 priority.$hn -Q:1 normal_tasks \
                    -Q:2  priority_tasks -c 5 --pidfile=${MSERVE_DATA}/celeryd%n.pid"
	ret_val="$?"
	echo "do_start return value: $ret_val"
	return $ret_val
}

do_stop() {
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	cd /tmp
	log_daemon_msg "Stopping mserve processes"
        su www-data -c "kill `cat ${MSERVE_DATA}/celerycam.pid`"
        su www-data -c "rm ${MSERVE_DATA}/celerycam.pid"
	su www-data -c "$DAEMON celeryd_multi stop \
		--logfile=${MSERVE_DATA}/celeryd%n.log -l DEBUG 2 -n:1 normal.$hn \
		-n:2 priority.$hn -Q:1 normal_tasks -Q:2 priority_tasks -c 5 \
		--pidfile=${MSERVE_DATA}/celeryd%n.pid"
        ret_val="$?"
	echo "do_stop return value: $ret_val"
	return $ret_val
}

do_status() {
	celeryd-multi show
}


case "$1" in
    start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
        ;;
    stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
        ;;
    status)
	do_status
        ;;
    restart)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) 
			do_start
			case "$?" in
				0) log_end_msg 0 ;;
				1) log_end_msg 1 ;; # Old process is still running
				*) log_end_msg 1 ;; # Failed to start
			esac
			;;
		*)
			# failed to stop
			log_end_msg 1
			;;
	esac
        ;;
    *)
        echo "Usage: $0 {{start|stop|status|restart}" >&2
        exit 3
        ;;
esac

:
